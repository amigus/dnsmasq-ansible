{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is the documentation for the amigus.dnsmasq Ansible collection. It is available on Ansible Galaxy. It contains roles that automate Dnsmasq. They are modular and create their own separate Dnsmasq configuration files.</p>"},{"location":"#roles","title":"Roles","text":"<code>dnsmasq</code> runs <code>dnsmasq_install</code> then other roles based on which variables are present. <code>dnsmasq_install</code> installs Dnsmasq and configures the system to for it. <code>dnsmasq_dhcp</code> configures DHCP options and tags, IPv4 ranges and reservations. <code>dnsmasq_dhcp_db</code> adds an SQLite3 DHCP lease management. <code>dnsmasq_dns</code> configures DNS resolver options, including upstream servers, and a hosts file. <code>dnsmasq_web</code> installs the dnsmasq-web REST API."},{"location":"#prerequisites","title":"Prerequisites","text":"<p>This is an Ansible Collection so it requires Ansible which requires Python. It also requires the Python netaddr libarary.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install the collection from Ansible Galaxy:</p> <pre><code>ansible-galaxy collection install amigus.dnsmasq\n</code></pre> <p>Target the <code>dnsmasq</code> group in your ansible inventory:</p> /etc/ansible/hosts<pre><code>[dnsmasq]\n192.168.100.2\n</code></pre> <p>Run the default playbook:</p> <pre><code>ansible-playbook amigus.dnsmasq.dnsmasq\n</code></pre> <p>The initial installation will include no configuration. See the Configuration section of the Getting Started for details.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/#ansible-controller","title":"Ansible controller","text":"<p>A Linux system with Ansible and amigus.dnsmaq installed.</p>"},{"location":"getting-started/#target-systems","title":"Target system(s)","text":"<p>Must have Python installed and use the <code>apk</code>, <code>dnf</code> or <code>zypper</code> package manager.</p>"},{"location":"getting-started/#supported-distros","title":"Supported distros","text":"<ul> <li>RedHat based: Rocky Linux, AlmaLinux</li> <li>OpenSUSE based: Leap or Tumbleweed</li> <li>Alpine Linux</li> </ul>"},{"location":"getting-started/#root-access","title":"Root access","text":"<p>The user running Ansible needs SSH access to the target system(s) as root or a non-root user with sudo root access.</p>"},{"location":"getting-started/#static-ip-address","title":"Static IP address","text":"<p>The target system(s) must already have a static IP address on the interface for DHCP to work.</p>"},{"location":"getting-started/#create-an-inventory","title":"Create an Inventory","text":"<p>Ansible targets systems from an inventory. Inventories are lists of systems and groupings that Ansible targets en masse.</p> <p>Tip</p> <p>The Ansible documentation includes a guide on creating and managing inventories.</p> <p>The collection's default playbook targets the <code>dnsmasq</code> group. So it is best to add target systems to that group in the inventory:</p> inventory.yaml<pre><code>---\ndnsmasq:\n  hosts:\n    # Use a DNS resolvable name\n    server1:\n    # Or set ansible_host to a resolvable name or IP address:\n    # nodns1:\n    #   ansible_host: 192.168.100.2\n  vars:\n    # Use when SSH access to the target is as a non-root user with sudo root access:\n    ansible_become: yes\n    # Use when SSH access uses a different username than the user calling Ansible:\n    # ansible_user: adam\n</code></pre> <p>Important</p> <p>Ensure that the user can log as root or a non-root user with sudo root access without any prompting</p> <p>Tip</p> <p>It is not typical but demonstration purposes, the same system can be function as the controller and the target. To target localhost (only):</p> <pre><code>---\ndnsmasq:\n  hosts:\n    localhost:\n      ansible_connection: local\n</code></pre> <p>Note</p> <p>The default <code>ansible_connection</code> is <code>ssh</code>. Using <code>local</code> simplifies the demonstration environment by not using it.</p>"},{"location":"getting-started/#run-the-playbook","title":"Run the playbook","text":"<p>Ansible executes tasks most often organized into playbooks.</p> <p>The collection includes this one:</p> dnsmasq.yaml<pre><code>---\n- hosts: dnsmasq\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>Use <code>ansible-playbook</code> to run it on the inventory:</p> <pre><code>ansible-playbook -i inventory.yaml amigus.dnsmasq.dnsmasq\n</code></pre> <p>If everything is set up correctly, it will install Dnsmasq on the target(s). </p> <p>Tip</p> <p>The Ansible documentation includes a very useful guide on using playbooks.</p>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>Note</p> <p>Ansible variables can be added to either the inventory or playbook, so adding the YAML below to either will work.</p>"},{"location":"getting-started/#dns","title":"DNS","text":"<p>The dnsmasq_dns role sets DNS options and resolvers (servers).</p> <p>For example, to use <code>1.1.1.1</code> instead of the system resolver:</p> <ol> <li>Add <code>1.1.1.1</code> as a server</li> <li>Add the Dnsmasq <code>no-resolv</code> to the options</li> <li>Add <code>bogus-priv</code> and <code>domain-needed</code> as well if the resolver is external</li> </ol> <pre><code>dnsmasq_dns_options:\n- bogus-priv\n- domain-needed\n- no-resolv\ndnsmasq_dns_servers\n- address: 1.1.1.1\n</code></pre>"},{"location":"getting-started/#dhcp","title":"DHCP","text":"<p>The dnsmasq_dhcp role runs when <code>dnsmasq_dhcp_interfaces</code> is defined.</p> <pre><code>dnsmasq_dhcp_interfaces:\n- device: eth0\n- router: 1\n- start: 100\n- end: 199\n</code></pre> <p>Only the <code>device</code> is required:</p> <ul> <li>Adding <code>router</code> tells Dnsmasq to offer that server as the network gateway instead of itself by default.</li> <li>Adding <code>start</code> tells Dnsmasq to dynamically lease a range of subnet IP addresses starting at this one,</li> <li>Adding <code>end</code> tells Dnsmasq to only extend the range to this IP instead of to the last IP in the subnet.</li> </ul> <p>Thus, to configure a static server that only serves reserved IP addresses, define <code>dnsmasq_dhcp_hosts</code>:</p> <pre><code>dnsmasq_dhcp_hosts: |\n  11:22:33:44:55:66,192.168.1.11,server1\n  server2,192.168.1.12\ndnsmasq_dhcp_interfaces: [{ device: eth0 }]\n</code></pre> <p>Note</p> <p>Dnsmasq allows reservations based on name instead of MAC address, so in the example above, any client sending DHCP requests with the hostname <code>server2</code>, will get the IP address <code>192.168.1.12</code>.</p>"},{"location":"getting-started/#database","title":"Database","text":"<p>The dnsmasq_dhcp_db role runs when <code>dnsmasq_dhcp_db</code> is defined.</p> <pre><code>---\ndnsmasq_dhcp_db: /var/lib/misc/dnsmasq.leases.db\ndnsmasq_dhcp_interfaces: [{ device: eth0, start: 100, end: 199 }]\ndnsmasq_dhcp_db_script: /usr/sbin/dnsmasq-leasesdb\n</code></pre> <p>Note</p> <p>The role will create the database and the script so neither should exist initially.</p>"},{"location":"getting-started/#dnsmasq-web","title":"dnsmasq-web","text":"<p>The dnsmasq_web role runs when <code>dnsmasq_dhcp_web_binary</code> is defined.</p> <pre><code>dnsmasq_dhcp_db: /var/lib/misc/dnsmasq.leases.db\ndnsmasq_dhcp_hosts_dir: /var/lib/misc/dnsmasq.hosts.d\ndnsmasq_dhcp_interfaces: [{ device: eth0, start: 100, end: 199 }]\ndnsmasq_dhcp_db_script: /usr/sbin/dnsmasq-leasesdb\n\ndnsmasq_dhcp_web_binary: /usr/sbin/dnsmasq-web\n</code></pre> <p>It installs the latest release of dnsmasq-web. Once installed, it accepts HTTP requests on port <code>867</code> by default.</p> <p>The REST API endpoints enable management of DHCP clients, leases and client IP reservations.</p> <p>There is also a CLI that is handy for viewing the DHCP leases table remotely.</p>"},{"location":"getting-started/#takeaways","title":"Takeaways","text":"<p>Typically, DHCP configuration boils down to three (3) things:</p> <ol> <li>Whether the server static or dynamic</li> <li>What DNS server(s) does the server offer clients</li> <li>Does the server include DNS records from a hosts file</li> </ol> <p>If <code>start</code> is defined then the server is dynamic otherwise it's static.</p> <p>The DNS server(s) can be the underlying system resolver or a list of servers.</p> <p>Important</p> <p>Add <code>no-resolv</code> to <code>dnsmasq_dns_options</code> when defining <code>dnsmasq_dns_servers</code>. Otherwise Dnsmasq will use both as DNS forwarders.</p> <p>Also add <code>bogus-priv</code> to avoid spamming the upstream server(s) with requests for local resources.</p> <pre><code>dnsmasq_dns_options: [bogus-priv, no-resolv]\ndnsmasq_dns_servers: [{ address: 1.1.1.1 }]\n</code></pre> <p>Important</p> <p>The DHCP server offers itself as the DNS server then forwards requests. However, it can also offer another DNS server.</p> <pre><code>dnsmasq_dhcp_client_options:\n  - option:dns-server,192.168.1.9\n</code></pre> <p>In this case, add <code>no-hosts</code> and <code>no-resolv</code> to <code>dnsmasq_dns_options</code> without defining <code>dnsmasq_dns_servers</code>, to effectively disable the DNS recursive resolver.</p> <pre><code>dnsmasq_dns_options: [no-hosts, no-resolv]\n</code></pre> <p>Important</p> <p>Add <code>no-hosts</code> to dnsmasq_dns_options when defining <code>dnsmasq_dns_hosts</code>. Otherwise Dnsmasq will also serve records from <code>/etc/hosts</code>.</p> <pre><code>dnsmasq_dns_hosts: |\n  192.168.1.6 mco.lbsg.net\ndnsmasq_dns_options: [bogus-priv, no-hosts]\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>The installation guide covers getting the collection installed on an Ansible controller.</p> <p>The Getting Started guide covers using the collection to install Dnsmasq.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>A Linux system with Python installed to serve as the Ansible controller. It will run the roles to configure the target system.</p>"},{"location":"installation/#install","title":"Install","text":""},{"location":"installation/#virtual-enviornment","title":"Virtual enviornment","text":"<p>Python includes venv. This guide will use it to create a \"virtual environment.\" The collection and it's dependencies will be installed into it. This avoids adding it to the global/system environment.</p> <pre><code>python -m venv dnsmasq.venv.d\n. dnsmasq.venv.d/bin/activate\n</code></pre> <p>Note</p> <p>This is optional but recommended in most cases. However, you can skip this step if the controller system is dedicated to running Ansible.</p>"},{"location":"installation/#dependencies-via-pip","title":"Dependencies via pip","text":""},{"location":"installation/#netaddr","title":"netaddr","text":"<p>The netaddr library may already be installed. The command below will use pip to install it only when it is not present.</p> <pre><code>python3 -c \"import netaddr\" 2&gt;/dev/null || pip install netaddr\n</code></pre>"},{"location":"installation/#ansible","title":"ansible","text":"<p>Likewise, ansible may already be present. The command below will install ansible when it is not already present.</p> <pre><code>command -v ansible &gt;/dev/null 2&gt;&amp;1 || pip install ansible-core\n</code></pre>"},{"location":"installation/#collection-via-galaxy","title":"Collection via Galaxy","text":"<p>Ansible includes the <code>ansible-galaxy</code> tool. It manages roles and collections in the Ansible Galaxy.</p> <pre><code>ansible-galaxy collection install amigus.dnsmasq\n</code></pre>"},{"location":"installation/#all-in-one-install","title":"All-in-one install","text":"<pre><code>python3 -m venv dnsmasq.venv.d\n. dnsmasq.venv.d/bin/activate\npython3 -c \"import netaddr\" 2&gt;/dev/null || pip install netaddr\ncommand -v ansible &gt;/dev/null 2&gt;&amp;1 || pip install ansible-core\nansible-galaxy collection install amigus.dnsmasq\n</code></pre>"},{"location":"roles/dnsmasq/","title":"dnsmasq","text":"<p>This is the main role of the collection. It conditionally includes all the other roles:</p> Role Included by this role <code>dnsmasq_install</code> always <code>dnsmasq_dhcp</code> when <code>dnsmasq_dhcp_interfaces</code> is defined <code>dnsmasq_dhcp_db</code> when <code>dnsmasq_dhcp_db</code> is defined <code>dnsmasq_dns</code> when <code>dnsmasq_dns_options</code> or <code>dnsmasq_dns_servers</code> are defined <code>dnsmasq_web</code> when <code>dnsmasq_web_binary</code> is defined"},{"location":"roles/dnsmasq/#examples","title":"Examples","text":"<p>A DNS resolver that forwards queries to the host resolver:</p> <pre><code>- hosts: dnsmasq\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>A resolver that resolves two hosts and forwards all other queries to <code>1.1.1.1</code>:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dns_hosts: |\n      192.168.1.11 storage\n      192.168.1.12 games\n    dnsmasq_dns_options: [bogus-priv, domain-needed, no-hosts, no-resolv]\n    dnsmasq_dns_servers: [{ address: 1.1.1.1 }]\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre>"},{"location":"roles/dnsmasq_dhcp/","title":"dnsmasq_dhcp","text":"<p>Manages DHCP configuration including:</p> <ul> <li>dhcp-hostsdir</li> <li>dhcp-hostsfile</li> <li>dhcp-ignore</li> <li>dhcp-range</li> <li>dhcp-options</li> <li>dhcp-mac</li> <li>domain</li> </ul>"},{"location":"roles/dnsmasq_dhcp/#dhcp-configuration","title":"DHCP Configuration","text":"<p>The DHCP role is written to assume that the interface already has a static IP. It then uses the network information of the device to configure the server. Thus are are no explicit subnet declarations and nodes are integers.</p>"},{"location":"roles/dnsmasq_dhcp/#dhcp-interfaces","title":"DHCP interfaces","text":"<p>The <code>start</code>, <code>end</code>, and <code>router</code> variables are integers representing the node. E.g., <code>router=1</code>, <code>start=2</code> and <code>end=10</code> on an interface with subnet <code>192.168.1.0/24</code>, will set the subnet gateway to <code>192.168.1.1</code> and the range to <code>192.168.1.2-10</code>.</p>"},{"location":"roles/dnsmasq_dhcp/#device-and-router-values","title":"device and router values","text":"<p>Each interface must specify at least a device name, e.g., <code>eth0</code>. It can also specify a router, e.g., <code>1</code>. If the router is not set then Dnsmasq supplies its own IP as the gateway by default.</p>"},{"location":"roles/dnsmasq_dhcp/#start-and-end-values","title":"start and end values","text":"<p>If no <code>start</code> or <code>end</code> are set then the inteface will be <code>static</code> in Dnsmasq. If a <code>start</code> but no <code>end</code> is set then the range will run to the last address in the subnet.</p>"},{"location":"roles/dnsmasq_dhcp/#ethernet-address-mac-tags","title":"Ethernet address (MAC) tags","text":"<p>The role sets the Dnsmasq <code>dhcp-mac</code> parameter which enables ethernet address prefix-based tagging.</p>"},{"location":"roles/dnsmasq_dhcp/#dhcp-hosts","title":"DHCP hosts","text":"<p>The role manages a file containing <code>dhcp-host</code> configuration values. It passes the file to Dnsmasq in the <code>dhcp-hostsfile</code> parameter. It also sets the <code>dhcp-hostsdir</code> from the <code>dnsmasq_dhcp_hosts_dir</code> variable.</p>"},{"location":"roles/dnsmasq_dhcp/#role-variables","title":"Role Variables","text":""},{"location":"roles/dnsmasq_dhcp/#required","title":"Required","text":"<ul> <li><code>dnsmasq_dhcp_interfaces</code>: List of interfaces to configure DHCP on</li> </ul>"},{"location":"roles/dnsmasq_dhcp/#optional","title":"Optional","text":"<ul> <li><code>dnsmasq_dhcp_client_options</code>: A list of Dnsmasq <code>dhcp-option</code> parameters,   e.g., option:domain-search,wifi.lan</li> <li><code>dnsmasq_dhcp_domain</code>: Sets the Dnsmasq <code>dhcp-domain</code></li> <li><code>dnsmasq_dhcp_hosts</code>: DHCP host reservations</li> <li><code>dnsmasq_dhcp_hosts_dir</code>: Directory for DHCP host files, i.e., <code>dhcp-hostsdir</code></li> <li><code>dnsmasq_dhcp_options</code>: A list of Dnsmasq DHCP-related options, e.g., <code>log-dhcp</code></li> <li><code>dnsmasq_dhcp_mac_tags</code>: A mapping of Dnsmasq tags to ethernet addresses</li> </ul>"},{"location":"roles/dnsmasq_dhcp/#examples","title":"Examples","text":"<p>Minimal DHCP server on <code>eth0</code> that sets itself as the gateway and leases the entire subnet from <code>.5</code>. It also sets itself as the DNS server by forwarding everything through system resolver:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dhcp_interfaces: [{ device: eth0, start: 5 }]\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>A static (reservation-only) DHCP server that serves two clients that use <code>.1</code> as the gateway:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dhcp_hosts: |\n      00:15:5F:09:03:01,192.168.1.11,server1\n      00:15:5F:09:03:02,192.168.1.12,server2\n    dnsmasq_dhcp_interfaces: [{ device: eth0, router: 1 }]\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>A DHCP server that uses tags to manage device settings:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dhcp_client_options:\n      - tag:hyperv,option:dns-server:192.168.1.5\n      - tag:wizlb,option:dns-server,192.168.1.4\n    dnsmasq_dhcp_domain: wifi.lan\n    dnsmasq_dhcp_interfaces: [{ device: eth0, router: 1, start: 100, end: 199 }]\n    dnsmasq_dhcp_mac_tags:\n      - hyper-v: 00:15:5F:*:*:*\n      - wizbulb: [6c:29:90:*:*:*, 44:4f:8e:*:*:*]\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre>"},{"location":"roles/dnsmasq_dhcp_db/","title":"dnsmasq_dhcp_db","text":"<p>Manages the optional lease database, associated script, and configuration including:</p> <ul> <li>dhcp-script</li> <li>dhcp-scriptuser</li> <li>script-on-renewal</li> <li>leasefile-ro</li> </ul> <p>The role contains a shell script and an SQLite3 database schema. It configures Dnsmasq to use the shell script to manage leases. The shell script uses the SQLite3 database to manage them. It also keeps accumulates request and client data over time. It will run when <code>dnsmasq_dhcp_db</code> is defined.</p>"},{"location":"roles/dnsmasq_dhcp_db/#database-schema","title":"Database Schema","text":"<p>The role creates an SQLite3 database three tables:</p> <ul> <li>requests</li> <li>leases</li> <li>clients</li> </ul> <p>The requests table grows infinitely(!). The leases and clients tables are maintained by the script. The leases table contains current leases. The clients table contains a list of current and past clients.</p>"},{"location":"roles/dnsmasq_dhcp_db/#role-variables","title":"Role Variables","text":""},{"location":"roles/dnsmasq_dhcp_db/#required","title":"Required","text":"<ul> <li><code>dnsmasq_dhcp_db</code>: Where to store the database (e.g., <code>/var/lib/misc/dnsmasq.leases.db</code>)</li> <li><code>dnsmasq_dhcp_db_script</code>: Where to install the script (e.g., <code>/usr/sbin/dnsmasq-leasesdb</code>)</li> </ul>"},{"location":"roles/dnsmasq_dhcp_db/#optional","title":"Optional","text":"<ul> <li><code>dnsmasq_dhcp_db_script_sqlite_bin</code>: The location of the sqlite3 binary</li> <li><code>dnsmasq_dhcp_db_user</code>: User to run the script as (default, <code>dnsmasq_user</code>)</li> </ul>"},{"location":"roles/dnsmasq_dhcp_db/#examples","title":"Examples","text":"<p>A DHCP server that uses the SQLite lease database:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dhcp_db: /var/lib/misc/dnsmasq.leases.db\n    dnsmasq_dhcp_db_script: /usr/sbin/dnsmasq-leasesdb\n    dnsmasq_dhcp_interfaces: [{ device: eth0, router: 1, start: 100, end: 199 }]\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>A more complex example with MAC address tagging:</p> <pre><code>- hosts: servers\n  vars:\n    dnsmasq_dhcp_db: /var/lib/misc/dnsmasq.leases.db\n    dnsmasq_dhcp_client_options:\n      - tag:hyperv,option:dns-server:192.168.1.5\n      - tag:wizlb,option:dns-server,192.168.1.4\n    dnsmasq_dhcp_domain: wifi.lan\n    dnsmasq_dhcp_interfaces: [{ device: eth0, router: 1, start: 100, end: 199 }]\n    dnsmasq_dhcp_mac_tags:\n      - hyperv: 00:15:5F:*:*:*\n      - wizlb: [6c:29:90:*:*:*, 44:4f:8e:*:*:*]\n    dnsmasq_dhcp_db_script: /usr/sbin/dnsmasq-leasesdb\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre>"},{"location":"roles/dnsmasq_dns/","title":"dnsmasq_dns","text":"<p>Manages DNS host and server configuration including:</p> <ul> <li>interface</li> <li>addn-hosts</li> <li>server</li> <li>rev-server</li> </ul>"},{"location":"roles/dnsmasq_dns/#dns-configuration","title":"DNS Configuration","text":"<p>The DNS roles are written to configure Dnsmasq as a resolver. There is no support for authoratative domains. However <code>auth-server</code> like any other option, can be added to <code>dnsmasq_dns_options</code>.</p>"},{"location":"roles/dnsmasq_dns/#dns-interfaces","title":"DNS interfaces","text":"<p>The DNS role are written to set the <code>interface</code> Dnsmasq configuration. The value <code>default</code> tells the role to use the name of the gateway interface of the target. Otherwise it should list the interfaces that Dnsmasq should listen for DNS requests on.</p>"},{"location":"roles/dnsmasq_dns/#dns-hosts","title":"DNS hosts","text":"<p>The role can maintain a hosts file which is passed to Dnsmasq via the <code>addn-hosts</code> parameter. Add <code>no-hosts</code> to <code>dnsmasq_dns_options</code> to avoid also reading <code>/etc/hosts</code> on the target system.</p>"},{"location":"roles/dnsmasq_dns/#servers","title":"servers","text":"<p>The role creates <code>server</code> and <code>rev-server</code> configuration parameters for Dnsmasq. Add <code>no-resolv</code> to <code>dnsmasq_dns_options</code> to avoid also using the resolver on the target system.</p>"},{"location":"roles/dnsmasq_dns/#address-values","title":"address values","text":"<p>Each server must have one <code>address</code> value which must be an IP address. Each <code>address</code> will become a Dnsmasq <code>server</code> parameter. A server can contain one or more <code>domain</code> and <code>network</code> values.</p>"},{"location":"roles/dnsmasq_dns/#domain-and-network-values","title":"domain and network values","text":"<p>Adding a <code>domain</code> or list of <code>domains</code> to a server configures Dnsmasq to forward queries for it/them to the server. Adding a <code>network</code> or list of <code>networks</code> forwards reverse-DNS queries, i.e., IP to name queries to the corresponding server.</p>"},{"location":"roles/dnsmasq_dns/#role-variables","title":"Role Variables","text":""},{"location":"roles/dnsmasq_dns/#optional","title":"Optional","text":"<ul> <li><code>dnsmasq_dns_servers</code>: List of DNS servers to configure</li> <li><code>dnsmasq_dns_hosts</code>: DNS host entries</li> <li><code>dnsmasq_dns_interfaces</code>: Interfaces to listen on for DNS requests</li> <li><code>dnsmasq_dns_options</code>: DNS-related Dnsmasq options</li> </ul>"},{"location":"roles/dnsmasq_dns/#examples","title":"Examples","text":"<p>A DHCP and DNS server running on the gateway that uses <code>1.1.1.1</code> and <code>8.8.8.8</code> for DNS:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dns_options: [bogus-priv, domain-needed, no-resolv]\n    dnsmasq_dns_servers: [{address: 1.1.1.1}, {address: 8.8.8.8}]\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>NOTE: the <code>bogus-priv</code> and <code>domain-needed</code> parameters are recommended to avoid spamming them. <code>no-resolv</code> avoids also using whatever server(s) exist in <code>/etc/resolv.conf</code></p> <p>A DNS server with a hosts file and a non-default local resolver:</p> <pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dns_hosts: |\n      192.168.1.11 storage\n      192.168.1.12 games\n    dnsmasq_dns_options: [bogus-priv, domain-needed, no-hosts, no-resolv]\n    dnsmasq_dns_interfaces: default\n    dnsmasq_dns_servers:\n      - address: 192.168.1.2\n        domain: wifi.lan\n        network: 192.168.1.0/24\n      - address: 1.1.1.1\n      - address: 8.8.8.8\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre> <p>It ignores /etc/hosts and /etc/resolv.conf. It forwards queries for <code>wifi.lan</code> and <code>192.168.1.0/24</code> to <code>192.168.1.2</code>, and uses <code>1.1.1.1</code> and <code>8.8.8.8</code> to resolve anything else.</p>"},{"location":"roles/dnsmasq_install/","title":"dnsmasq_install","text":"<p>Installs and configures Dnsmasq on the target system using apk, dnf and zypper.</p> <ul> <li>Installs the Dnsmasq package(s)</li> <li>Installs SQLite3 when using the lease database</li> <li>Ensures that the user, default <code>dnsmasq</code>,   usergroup, default <code>dnsmasq</code>,   and configuration directory, default <code>/etc/dnsmasq.d</code> all exist.</li> <li>Configures Dnsmasq to read the <code>.conf</code> files from the configuration directory.</li> <li>Configures SELinux (when present) to permit Dnsmasq to use <code>dhcp-hostsdir</code>.</li> <li>Configures firewalld (when present) to permit DHCP, DNS or both.</li> </ul>"},{"location":"roles/dnsmasq_install/#role-variables","title":"Role Variables","text":""},{"location":"roles/dnsmasq_install/#required","title":"Required","text":"<p>None.</p>"},{"location":"roles/dnsmasq_install/#optional","title":"Optional","text":"<ul> <li><code>dnsmasq_etc</code>: The Dnsmasq configuration directory;   default is <code>/etc/dnsmasq.d</code></li> <li><code>dnsmasq_user</code>: The user that Dnsmasq runs as;   default is <code>dnsmasq</code></li> <li><code>dnsmasq_usergroup</code>: The usergroup that the Dnsmasq user belongs to;   default is <code>dnsmasq</code></li> </ul>"},{"location":"roles/dnsmasq_install/#example","title":"Example","text":"<pre><code>- hosts: dnsmasq\n  roles:\n    - amigus.dnsmasq.dnsmasq_install\n</code></pre>"},{"location":"roles/dnsmasq_web/","title":"dnsmasq_web","text":"<p>Installs the dnsmasq-web REST API. It has methods for managing DHCP leases and querying client and request data. It also manages DHCP revervations as files in <code>dhcp-hostsdir</code>.</p>"},{"location":"roles/dnsmasq_web/#role-variables","title":"Role Variables","text":""},{"location":"roles/dnsmasq_web/#required","title":"Required","text":"<ul> <li><code>dnsmasq_web_binary</code>: Where to the install the dnsmasq-web binary</li> </ul>"},{"location":"roles/dnsmasq_web/#optional","title":"Optional","text":"<ul> <li><code>dnsmasq_web_user</code>: User to run the service as;   default is <code>dnsmasq_user</code></li> <li><code>dnsmasq_web_group</code>: Group to run the service as;   default is <code>dnsmasq_usergroup</code></li> <li><code>dnsmasq_web_listen_address</code>: The TCP address:port that the daemon should listen on;   default is <code>:867</code></li> <li><code>dnsmasq_web_pid_file</code>: Path to the daemon's PID file;   default is <code>/run/dnsmasq-web.pid</code></li> </ul>"},{"location":"roles/dnsmasq_web/#example","title":"Example","text":"<pre><code>- hosts: dnsmasq\n  vars:\n    dnsmasq_dhcp_hosts_dir: /var/lib/misc/dnsmasq.hosts.d\n    dnsmasq_dhcp_interfaces: [{ device: eth0 }]\n    dnsmasq_web_binary: /usr/sbin/dnsmasq-web\n  roles:\n    - amigus.dnsmasq.dnsmasq\n</code></pre>"}]}